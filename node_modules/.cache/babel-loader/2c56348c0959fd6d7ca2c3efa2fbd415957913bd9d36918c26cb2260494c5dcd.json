{"ast":null,"code":"import React from'react';// NodesPanel component - displays available node types for dragging\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NodesPanel=_ref=>{let{onAddNode}=_ref;// Available node types - easily extensible for future node types\nconst nodeTypes=[{type:'textNode',label:'Message',icon:/*#__PURE__*/_jsx(\"svg\",{width:\"20\",height:\"20\",viewBox:\"0 0 24 24\",fill:\"#1976d2\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z\"})}),description:'Send a text message'}// Future node types can be easily added here:\n// {\n//   type: 'conditionNode',\n//   label: 'Condition',\n//   icon: <ConditionIcon />,\n//   description: 'Add conditional logic'\n// },\n// {\n//   type: 'apiNode',\n//   label: 'API Call',\n//   icon: <ApiIcon />,\n//   description: 'Make an API request'\n// }\n];// Handle drag start for adding nodes to the canvas\nconst onDragStart=(event,nodeType)=>{event.dataTransfer.setData('application/reactflow',nodeType);event.dataTransfer.effectAllowed='move';};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',height:'100%',overflowY:'auto'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px',paddingBottom:'10px',borderBottom:'1px solid #e0e0e0'},children:[/*#__PURE__*/_jsx(\"h3\",{style:{color:'#333',fontSize:'18px',fontWeight:'600',margin:'0'},children:\"Nodes Panel\"}),/*#__PURE__*/_jsx(\"p\",{style:{color:'#666',fontSize:'14px',margin:'8px 0 0 0'},children:\"Drag and drop nodes to build your flow\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',gap:'12px'},children:nodeTypes.map(nodeType=>/*#__PURE__*/_jsxs(\"div\",{draggable:true,onDragStart:event=>onDragStart(event,nodeType.type),style:{padding:'12px',border:'2px solid #e3f2fd',borderRadius:'8px',backgroundColor:'white',cursor:'grab',transition:'all 0.2s ease',display:'flex',alignItems:'center',gap:'12px'},onMouseEnter:e=>{e.target.style.borderColor='#1976d2';e.target.style.transform='translateY(-1px)';e.target.style.boxShadow='0 4px 12px rgba(25, 118, 210, 0.15)';},onMouseLeave:e=>{e.target.style.borderColor='#e3f2fd';e.target.style.transform='translateY(0)';e.target.style.boxShadow='none';},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'center',width:'32px',height:'32px',backgroundColor:'#f5f5f5',borderRadius:'6px'},children:nodeType.icon}),/*#__PURE__*/_jsxs(\"div\",{style:{flex:1},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontWeight:'600',color:'#333',fontSize:'14px',marginBottom:'2px'},children:nodeType.label}),/*#__PURE__*/_jsx(\"div\",{style:{color:'#666',fontSize:'12px'},children:nodeType.description})]}),/*#__PURE__*/_jsx(\"div\",{style:{color:'#999',fontSize:'12px'},children:\"Drag\"})]},nodeType.type))}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'20px',padding:'12px',backgroundColor:'#f8f9fa',borderRadius:'6px',border:'1px solid #e9ecef'},children:/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',color:'#6c757d',lineHeight:'1.4'},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Tip:\"}),\" Drag any node from this panel and drop it onto the canvas to add it to your flow.\"]})})]});};export default NodesPanel;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","NodesPanel","_ref","onAddNode","nodeTypes","type","label","icon","width","height","viewBox","fill","children","d","description","onDragStart","event","nodeType","dataTransfer","setData","effectAllowed","style","padding","overflowY","marginBottom","paddingBottom","borderBottom","color","fontSize","fontWeight","margin","display","flexDirection","gap","map","draggable","border","borderRadius","backgroundColor","cursor","transition","alignItems","onMouseEnter","e","target","borderColor","transform","boxShadow","onMouseLeave","justifyContent","flex","marginTop","lineHeight"],"sources":["C:/Users/hp/BiteSpeed/src/components/NodesPanel.js"],"sourcesContent":["import React from 'react';\r\n\r\n// NodesPanel component - displays available node types for dragging\r\nconst NodesPanel = ({ onAddNode }) => {\r\n  // Available node types - easily extensible for future node types\r\n  const nodeTypes = [\r\n    {\r\n      type: 'textNode',\r\n      label: 'Message',\r\n      icon: (\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"#1976d2\">\r\n          <path d=\"M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z\"/>\r\n        </svg>\r\n      ),\r\n      description: 'Send a text message'\r\n    }\r\n    // Future node types can be easily added here:\r\n    // {\r\n    //   type: 'conditionNode',\r\n    //   label: 'Condition',\r\n    //   icon: <ConditionIcon />,\r\n    //   description: 'Add conditional logic'\r\n    // },\r\n    // {\r\n    //   type: 'apiNode',\r\n    //   label: 'API Call',\r\n    //   icon: <ApiIcon />,\r\n    //   description: 'Make an API request'\r\n    // }\r\n  ];\r\n\r\n  // Handle drag start for adding nodes to the canvas\r\n  const onDragStart = (event, nodeType) => {\r\n    event.dataTransfer.setData('application/reactflow', nodeType);\r\n    event.dataTransfer.effectAllowed = 'move';\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      padding: '20px',\r\n      height: '100%',\r\n      overflowY: 'auto'\r\n    }}>\r\n      {/* Panel Header */}\r\n      <div style={{\r\n        marginBottom: '20px',\r\n        paddingBottom: '10px',\r\n        borderBottom: '1px solid #e0e0e0'\r\n      }}>\r\n        <h3 style={{\r\n          color: '#333',\r\n          fontSize: '18px',\r\n          fontWeight: '600',\r\n          margin: '0'\r\n        }}>\r\n          Nodes Panel\r\n        </h3>\r\n        <p style={{\r\n          color: '#666',\r\n          fontSize: '14px',\r\n          margin: '8px 0 0 0'\r\n        }}>\r\n          Drag and drop nodes to build your flow\r\n        </p>\r\n      </div>\r\n\r\n      {/* Node Types List */}\r\n      <div style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '12px'\r\n      }}>\r\n        {nodeTypes.map((nodeType) => (\r\n          <div\r\n            key={nodeType.type}\r\n            draggable\r\n            onDragStart={(event) => onDragStart(event, nodeType.type)}\r\n            style={{\r\n              padding: '12px',\r\n              border: '2px solid #e3f2fd',\r\n              borderRadius: '8px',\r\n              backgroundColor: 'white',\r\n              cursor: 'grab',\r\n              transition: 'all 0.2s ease',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: '12px'\r\n            }}\r\n            onMouseEnter={(e) => {\r\n              e.target.style.borderColor = '#1976d2';\r\n              e.target.style.transform = 'translateY(-1px)';\r\n              e.target.style.boxShadow = '0 4px 12px rgba(25, 118, 210, 0.15)';\r\n            }}\r\n            onMouseLeave={(e) => {\r\n              e.target.style.borderColor = '#e3f2fd';\r\n              e.target.style.transform = 'translateY(0)';\r\n              e.target.style.boxShadow = 'none';\r\n            }}\r\n          >\r\n            {/* Node Icon */}\r\n            <div style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              width: '32px',\r\n              height: '32px',\r\n              backgroundColor: '#f5f5f5',\r\n              borderRadius: '6px'\r\n            }}>\r\n              {nodeType.icon}\r\n            </div>\r\n\r\n            {/* Node Info */}\r\n            <div style={{ flex: 1 }}>\r\n              <div style={{\r\n                fontWeight: '600',\r\n                color: '#333',\r\n                fontSize: '14px',\r\n                marginBottom: '2px'\r\n              }}>\r\n                {nodeType.label}\r\n              </div>\r\n              <div style={{\r\n                color: '#666',\r\n                fontSize: '12px'\r\n              }}>\r\n                {nodeType.description}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Drag Indicator */}\r\n            <div style={{\r\n              color: '#999',\r\n              fontSize: '12px'\r\n            }}>\r\n              Drag\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Instructions */}\r\n      <div style={{\r\n        marginTop: '20px',\r\n        padding: '12px',\r\n        backgroundColor: '#f8f9fa',\r\n        borderRadius: '6px',\r\n        border: '1px solid #e9ecef'\r\n      }}>\r\n        <div style={{\r\n          fontSize: '12px',\r\n          color: '#6c757d',\r\n          lineHeight: '1.4'\r\n        }}>\r\n          <strong>Tip:</strong> Drag any node from this panel and drop it onto the canvas to add it to your flow.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodesPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}